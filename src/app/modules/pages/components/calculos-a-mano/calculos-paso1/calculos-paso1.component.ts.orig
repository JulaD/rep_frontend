<<<<<<< HEAD
import { Component, AfterViewInit, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
=======
import { Component, AfterViewInit, ViewChild } from "@angular/core";
import { FormControl, FormGroup, Validators } from "@angular/forms";
import {MatPaginator} from '@angular/material/paginator';
import { MatSnackBar } from "@angular/material/snack-bar";
import {MatTableDataSource} from '@angular/material/table';
import { Router } from "@angular/router";
import { compareFranjaEtaria, FranjaEtaria } from "src/app/FranjaEtaria";
import { GrupoEtario } from "src/app/GrupoEtario";
import { step1CantidadSinMedianaValidator } from "src/app/modules/shared/validators/step1-cantidad-sin-mediana.directive";
import { step1TodoVacioValidator } from "src/app/modules/shared/validators/step1-todo-vacio.directive";
import { AgeGroupJSON, RestService } from "src/app/rest.service";
import { Sexo } from "src/app/Sexo";
>>>>>>> feature_calculos_steps


<<<<<<< HEAD
const FEMENINO_DATA: EdadCantMediana[] = [
  { edad: '1 Año', cantidad: 151, mediana: 9.5 },
  { edad: '2 Años', cantidad: 441, mediana: 12.0 },
  { edad: '3 Años', cantidad: 411, mediana: 14.2 },
  { edad: '4 Años', cantidad: 846, mediana: 15.4 },
  { edad: '5 Años', cantidad: 456, mediana: 17.9 },
  { edad: '6 Años', cantidad: 894, mediana: 19.9 },
  { edad: '7 Años', cantidad: 120, mediana: 22.4 },
  { edad: '8 Años', cantidad: 784, mediana: 25.8 },
  { edad: '9 Años', cantidad: 9561, mediana: 28.1 },
  { edad: '10 Años', cantidad: 7984, mediana: 31.9 },
  { edad: '11 Años', cantidad: 845, mediana: 36.9 },
  { edad: '12 Años', cantidad: 1511, mediana: 41.5 },
  { edad: '13 Años', cantidad: 946, mediana: 45.8 },
  { edad: '14 Años', cantidad: 496, mediana: 47.6 },
  { edad: '15 Años', cantidad: 794, mediana: 52.1 },
  { edad: '16 Años', cantidad: 48, mediana: 53.5 },
  { edad: '17 Años', cantidad: 749, mediana: 54.4 },
  { edad: '18-29 Años', cantidad: 554, mediana: 60.0 },
  { edad: '30-59 Años', cantidad: 461, mediana: 60.0 },
  { edad: '60+ Años', cantidad: 1288, mediana: 60.0 },
];

=======
const femeninoData: GrupoEtario[] = []
const masculinoData: GrupoEtario[] = []
const numeroEnteroRe: RegExp = new RegExp('^[0-9]+$')
// El regex es ^(un entero > 0)|(un decimal >= 1)|(un decimal > 0 y < 1)$
const numeroFloatRe: RegExp =
  new RegExp('^(0*[1-9][0-9]*)|(0*[1-9][0-9]+.[0-9]+)|(0+.0*[1-9][0-9]*)$')
>>>>>>> feature_calculos_steps
@Component({
  selector: 'app-calculos-paso1',
  templateUrl: './calculos-paso1.component.html',
  styleUrls: ['./calculos-paso1.component.css'],
})
export class CalculosPaso1Component implements AfterViewInit {
<<<<<<< HEAD
  edades: Edad[] = [
    { value: 'meses-0', viewValue: '0 Meses' },
    { value: 'meses-1', viewValue: '1 Meses' },
    { value: 'meses-2', viewValue: '2 Meses' },
    { value: 'meses-3', viewValue: '3 Meses' },
    { value: 'meses-4', viewValue: '4 Meses' },
    { value: 'meses-5', viewValue: '5 Meses' },
    { value: 'meses-6', viewValue: '6 Meses' },
    { value: 'meses-7', viewValue: '7 Meses' },
    { value: 'meses-8', viewValue: '8 Meses' },
    { value: 'meses-9', viewValue: '9 Meses' },
    { value: 'meses-10', viewValue: '10 Meses' },
    { value: 'meses-11', viewValue: '11 Meses' },
    { value: 'anios-1', viewValue: '1 Año' },
    { value: 'anios-2', viewValue: '2 Años' },
    { value: 'anios-3', viewValue: '3 Años' },
    { value: 'anios-4', viewValue: '4 Años' },
    { value: 'anios-5', viewValue: '5 Años' },
    { value: 'anios-6', viewValue: '6 Años' },
    { value: 'anios-7', viewValue: '7 Años' },
    { value: 'anios-8', viewValue: '8 Años' },
    { value: 'anios-9', viewValue: '9 Años' },
    { value: 'anios-10', viewValue: '10 Años' },
    { value: 'anios-11', viewValue: '11 Años' },
    { value: 'anios-12', viewValue: '12 Años' },
    { value: 'anios-13', viewValue: '13 Años' },
    { value: 'anios-14', viewValue: '14 Años' },
    { value: 'anios-15', viewValue: '15 Años' },
    { value: 'anios-16', viewValue: '16 Años' },
    { value: 'anios-17', viewValue: '17 Años' },
    { value: 'anios-18-29', viewValue: '18-29 Años' },
    { value: 'anios-30-59', viewValue: '30-59 Años' },
    { value: 'anios-60+', viewValue: '60+ Años' },
=======

  edades: FranjaEtaria[] = [
    FranjaEtaria.Meses_0,
    FranjaEtaria.Meses_1,
    FranjaEtaria.Meses_2,
    FranjaEtaria.Meses_3,
    FranjaEtaria.Meses_4,
    FranjaEtaria.Meses_5,
    FranjaEtaria.Meses_6,
    FranjaEtaria.Meses_7,
    FranjaEtaria.Meses_8,
    FranjaEtaria.Meses_9,
    FranjaEtaria.Meses_10,
    FranjaEtaria.Meses_11,
    FranjaEtaria.Anios_1,
    FranjaEtaria.Anios_2,
    FranjaEtaria.Anios_3,
    FranjaEtaria.Anios_4,
    FranjaEtaria.Anios_5,
    FranjaEtaria.Anios_6,
    FranjaEtaria.Anios_7,
    FranjaEtaria.Anios_8,
    FranjaEtaria.Anios_9,
    FranjaEtaria.Anios_10,
    FranjaEtaria.Anios_11,
    FranjaEtaria.Anios_12,
    FranjaEtaria.Anios_13,
    FranjaEtaria.Anios_14,
    FranjaEtaria.Anios_15,
    FranjaEtaria.Anios_16,
    FranjaEtaria.Anios_17,
    FranjaEtaria.Anios_18_29,
    FranjaEtaria.Anios_30_59,
    FranjaEtaria.Anios_60_mas
>>>>>>> feature_calculos_steps
  ];

  constructor(public rest: RestService, private router: Router, private _snackBar: MatSnackBar) { }

  displayedColumns: string[] = ['edad', 'cantidad', 'mediana'];
<<<<<<< HEAD

  dataSource = new MatTableDataSource<EdadCantMediana>(FEMENINO_DATA);
=======
  dataSourceF = new MatTableDataSource<GrupoEtario>(femeninoData);
  dataSourceM = new MatTableDataSource<GrupoEtario>(masculinoData);
>>>>>>> feature_calculos_steps

  @ViewChild('TablePaginatorF') paginatorF: MatPaginator;
  @ViewChild('TablePaginatorM') paginatorM: MatPaginator;

  ngAfterViewInit() {
    this.dataSourceF.paginator = this.paginatorF;
    this.dataSourceM.paginator = this.paginatorM;
  }
<<<<<<< HEAD
}
=======

  grupoEtarioForm = new FormGroup({
    edad: new FormControl('', Validators.required),
    cantFemenino: new FormControl('', Validators.pattern(numeroEnteroRe)),
    cantMasculino: new FormControl('', Validators.pattern(numeroEnteroRe)),
    medianaFemenino: new FormControl('', Validators.pattern(numeroFloatRe)),
    medianaMasculino: new FormControl('', Validators.pattern(numeroFloatRe))
  }, { validators: Validators.compose([step1TodoVacioValidator, step1CantidadSinMedianaValidator]) })
  
  onSubmit() {
    // Revisar si la la franja etaria ya tiene datos en la tabla
    let repetido: Boolean = false;
    const franja: string = this.grupoEtarioForm.get('edad')?.value;

    repetido = masculinoData.some((group: GrupoEtario)=> {
      return group.edad === franja;
    });
    if (!repetido) {
      repetido = femeninoData.some((group: GrupoEtario)=> {
        return group.edad === franja;
      });
    }
    if (repetido) {
      // presento mensaje de error
      this._snackBar.open(
        "ERROR: Ya existen datos ingresados para esta franja etaria", "Aceptar")
    } else {
      let cantFemenino: number = 0;
      let cantMasculino: number = 0;
      // Datos Femenino
      if (this.grupoEtarioForm.get('medianaFemenino')?.value != '') { // hay datos para agregar a Femenino
        if (this.grupoEtarioForm.get('cantFemenino')?.value === '') { // cantidad vacia equivale a 0
          cantFemenino = 0;
        } else {
          cantFemenino = this.grupoEtarioForm.get('cantFemenino')?.value
        }
        femeninoData.push(new GrupoEtario(
          this.grupoEtarioForm.get('edad')?.value,
          Sexo.Femenino,
          this.grupoEtarioForm.get('medianaFemenino')?.value,
          cantFemenino));
        femeninoData.sort((a,b) => {
          return compareFranjaEtaria(a.edad, b.edad)
        })
        this.dataSourceF._updateChangeSubscription();
      }
      // Datos Masculino
      if (this.grupoEtarioForm.get('medianaMasculino')?.value != '') { // hay datos para agregar a Femenino
        if (this.grupoEtarioForm.get('cantMasculino')?.value === '') { // cantidad vacia equivale a 0
          cantMasculino = 0;
        } else {
          cantMasculino = this.grupoEtarioForm.get('cantMasculino')?.value
        }
        masculinoData.push(new GrupoEtario(
          this.grupoEtarioForm.get('edad')?.value,
          Sexo.Masculino,
          this.grupoEtarioForm.get('medianaMasculino')?.value,
          cantMasculino));
          masculinoData.sort((a,b) => {
            return compareFranjaEtaria(a.edad, b.edad)
          })
        this.dataSourceM._updateChangeSubscription();
      }
    }
  } // onSubmit

  // Boton de borrar datos asociados a FranjaEtaria
  borrarEdad() {
    // la edad actualmente seleccionada en grupoEtarioForm
    const edadSel: FranjaEtaria = this.grupoEtarioForm.get('edad')?.value;
    
    // Borro en la tabla femeninoData
    const indexF = femeninoData.findIndex((element: GrupoEtario) => {
      return element.edad === edadSel;
    })
    if (indexF > -1) {
      femeninoData.splice(indexF, 1);
      this.dataSourceF._updateChangeSubscription(); // actualizo la tabla
    }
    // Borro en la tabla femeninoData
    const indexM = masculinoData.findIndex((element: GrupoEtario) => {
      return element.edad === edadSel;
    })
    if (indexM > -1) {
      masculinoData.splice(indexM, 1);
      this.dataSourceM._updateChangeSubscription(); // actualizo la tabla
    }
  } // borrarEdad

  // Envio de datos al backend
  prepareData(dataFem:GrupoEtario[], dataMasc :GrupoEtario[]): AgeGroupJSON[] {
    const res: AgeGroupJSON[] =[];
    
    dataFem.forEach((group: GrupoEtario)=> {
      let elem :AgeGroupJSON = {
        edad: group.edad as string,
        sexo: group.sexo as string,
        pesoMediano: group.pesoMediano,
        cantidad: group.cantidad };
      res.push(elem);
    });

    dataMasc.forEach((group: GrupoEtario)=> {
      let elem :AgeGroupJSON = {
        edad: group.edad as string,
        sexo: group.sexo as string,
        pesoMediano: group.pesoMediano,
        cantidad: group.cantidad };
      res.push(elem);
    });

    return res;
  }

  addCalculation(): void {
    this.rest.addCalculation(this.prepareData(femeninoData, masculinoData)).subscribe((result) => {
      
      this.router.navigate(['/result'], { queryParams: {result: JSON.stringify(result)}, skipLocationChange: true}​​​​​​​​);

    }, (err) => {
      console.log(err);
    });
  }
} // component class

/*
Capaz que esto modificado para que sea con GrupoEtario
sirve datos por defecto para mostrar algo

const FEMENINO_DATA: EdadCantMediana[] = [
  {edad: '1 Año', cantidad: 151, mediana: 9.5},
  {edad: '2 Años', cantidad: 441, mediana: 12.0},
  {edad: '3 Años', cantidad: 411, mediana: 14.2},
  {edad: '4 Años', cantidad: 846, mediana: 15.4},
  {edad: '5 Años', cantidad: 456, mediana: 17.9},
  {edad: '6 Años', cantidad: 894, mediana: 19.9},
  {edad: '7 Años', cantidad: 120, mediana: 22.4},
  {edad: '8 Años', cantidad: 784, mediana: 25.8},
  {edad: '9 Años', cantidad: 9561, mediana: 28.1},
  {edad: '10 Años', cantidad: 7984, mediana: 31.9},
  {edad: '11 Años', cantidad: 845, mediana: 36.9},
  {edad: '12 Años', cantidad: 1511, mediana: 41.5},
  {edad: '13 Años', cantidad: 946, mediana: 45.8},
  {edad: '14 Años', cantidad: 496, mediana: 47.6},
  {edad: '15 Años', cantidad: 794, mediana: 52.1},
  {edad: '16 Años', cantidad: 48, mediana: 53.5},
  {edad: '17 Años', cantidad: 749, mediana: 54.4},
  {edad: '18-29 Años', cantidad: 554, mediana: 60.0},
  {edad: '30-59 Años', cantidad: 461, mediana: 60.0},
  {edad: '60+ Años', cantidad: 1288, mediana: 60.0}
];
*/
>>>>>>> feature_calculos_steps
